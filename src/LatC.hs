-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents, hPutStr, stderr )
import System.Environment ( getArgs, getProgName, getExecutablePath )
import System.Exit ( exitFailure, exitSuccess )
import System.FilePath ( dropExtension, takeDirectory )
import System.Process ( runCommand )
import Data.List ( intercalate )

import LexLatte
import ParLatte
import SkelLatte
import PrintLatte
import AbsLatte
import CFGraph
import TypeChecker
import CompilerLatte

import qualified Data.Map as M

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

--runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile path v p f = readFile f >>= run path f v p

--run :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
run path f v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do hPutStr stderr "ERROR\n"
                          putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do --putStrLn "\nParse Successful!"
                          --showTree v tree
                          func <- getFunctions tree
                          (fenv, tree') <- typeCheck tree
                          code <- compileProg tree' fenv
                          hPutStr stderr "OK\n"
                          let fname = sanitize $ dropExtension f
                          let fpath = fname ++ ".ll"
                          let mid = fname ++ "mid.bc"
                          writeFile fpath $ toLLVM code
                          let llvmAs = "llvm-as -o " ++ mid ++ " " ++ fpath
                          let dir = takeDirectory path
                          let llvmLink = "llvm-link -o " ++ fname ++ ".bc " ++  mid ++ " " ++ dir ++ "/lib/runtime.bc"
                          runCommand $ llvmAs ++ " && " ++ llvmLink
                          exitSuccess


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  p <- getExecutablePath
  case args of
    ["--help"] -> usage
    [] -> hGetContents stdin >>= run p "stdin" 2 pProgram
    "-s":fs -> mapM_ (runFile p 0 pProgram) fs
    fs -> mapM_ (runFile p 2 pProgram) fs

toLLVM :: [LLVMCode] -> String
toLLVM code = intercalate "" $ map show code

sanitize = foldr go []
  where
    go ' ' r = '\\':' ':r
    go c   r = c:r
